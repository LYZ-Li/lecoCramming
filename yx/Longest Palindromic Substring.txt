# class Solution:
#     def longestPalindrome(self, s: str) -> str:
#         set_string = set(s)
#         char_count = 0
#         for char in set_string:
#             for i in range(len(s)):
#                 if s[i] == char:
#                     char_count += 1
#             if char_count == 1:
#                 set_string.remove(char)
#                 char_count = 0
        
#         loc = list()

#         for char in set_string:
#             for i in range(len(s)):

class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s) <= 1:
            return s
        
        Max_Len=1
        Max_Str=s[0]
        for i in range(len(s)-1):
            for j in range(i+1,len(s)):
                if j-i+1 > Max_Len and s[i:j+1] == s[i:j+1][::-1]:
                    Max_Len = j-i+1
                    Max_Str = s[i:j+1]

        return Max_Str

解题思路：
Palindromic Subtring一定是对称的(回文子字符串)

------------------------------------------

class Solution:
    def longestPalindrome(self, s: str) -> str:

        if s==s[::-1]: 
            return s
        left = self.longestPalindrome(s[1:])
        right = self.longestPalindrome(s[:-1])

        if len(left)>len(right):
            return left
        else:
            return right
这里是利用了递归的方法，面向对象编程



        
        