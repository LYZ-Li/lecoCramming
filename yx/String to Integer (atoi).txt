# class Solution:
#     def myAtoi(self, s: str) -> int:

#         new_s = s.strip()
#         if new_s[0] == '-' or new_s[0] == "+" or new_s[0].isalpha():
#             if new_s[1] == '-' or new_s[1] == "+" or new_s[1].isalpha():
#                 return 0

#         idx_list = list()
#         result = ''

#         for idx, char in enumerate(new_s):
#             if char.isdigit() or char == "-" or char == "+" or char == '.':
#                 idx_list.append(idx)
        
        
#         for idx in idx_list:
#             result = result + new_s[idx]

#         if result[0] == "+":
#             result = result[1:]

#         if int(float(result)) < -2**31:
#             return -2**31

#         elif int(float(result)) > 2**31-1:
#             return 2**31-1

#         else:
#             return int(float(result))

import re
class Solution:
    def myAtoi(self, s: str) -> int:
        s = s.strip()
        if len(s):
            if not s[0].isalpha():
                i = re.search(r"^(-\d+)|^(\+\d+)|^(\d+)",s)
                if i is not None:
                    i = int(i.group())
                    if i < 0:
                        return max(-2**31, i)
                    return min(2**31 - 1, i)
        return 0

注意：
可以尝试导入其他库
此处使用了正则表达式